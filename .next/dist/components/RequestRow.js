'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/home/daly/kickstart/components/RequestRow.js';


var RequestRow = function (_Component) {
  (0, _inherits3.default)(RequestRow, _Component);

  function RequestRow() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, RequestRow);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RequestRow.__proto__ || (0, _getPrototypeOf2.default)(RequestRow)).call.apply(_ref, [this].concat(args))), _this), _this.onApprove = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var campaign, accounts;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              campaign = (0, _campaign2.default)(_this.props.address);
              _context.next = 3;
              return _web2.default.eth.getAccounts();

            case 3:
              accounts = _context.sent;
              _context.next = 6;
              return campaign.methods.approveRequest(_this.props.id).send({ from: accounts[0] });

            case 6:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this2);
    })), _this.onFinalize = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      var campaign, accounts;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              campaign = (0, _campaign2.default)(_this.props.address);
              _context2.next = 3;
              return _web2.default.eth.getAccounts();

            case 3:
              accounts = _context2.sent;
              _context2.next = 6;
              return campaign.methods.finalizeRequest(_this.props.id).send({ from: accounts[0] });

            case 6:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this2);
    })), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(RequestRow, [{
    key: 'render',
    value: function render() {
      var Row = _semanticUiReact.Table.Row,
          Cell = _semanticUiReact.Table.Cell;
      var _props = this.props,
          id = _props.id,
          request = _props.request,
          approversCount = _props.approversCount;

      var readyToFinalize = request.approvalCount > approversCount / 2;

      return _react2.default.createElement(Row, { disabled: request.complete, positive: readyToFinalize && !request.complete, __source: {
          fileName: _jsxFileName,
          lineNumber: 28
        }
      }, _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 29
        }
      }, id), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 30
        }
      }, request.description), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 31
        }
      }, _web2.default.utils.fromWei(request.value, "ether")), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 32
        }
      }, request.recipient), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 33
        }
      }, request.approvalCount, '/', approversCount), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      }, request.complete ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'green', basic: true, onClick: this.onApprove, __source: {
          fileName: _jsxFileName,
          lineNumber: 36
        }
      }, 'Approve')), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }, request.complete ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'teal', basic: true, onClick: this.onFinalize, __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      }, 'Finalize')));
    }
  }]);

  return RequestRow;
}(_react.Component);

exports.default = RequestRow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdFJvdyIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsIm9uQXBwcm92ZSIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcm9wcyIsImFkZHJlc3MiLCJldGgiLCJnZXRBY2NvdW50cyIsInNlbnQiLCJtZXRob2RzIiwiYXBwcm92ZVJlcXVlc3QiLCJpZCIsInNlbmQiLCJmcm9tIiwic3RvcCIsIm9uRmluYWxpemUiLCJfY2FsbGVlMiIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsImZpbmFsaXplUmVxdWVzdCIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiUm93IiwiQ2VsbCIsIl9wcm9wcyIsInJlcXVlc3QiLCJhcHByb3ZlcnNDb3VudCIsInJlYWR5VG9GaW5hbGl6ZSIsImFwcHJvdmFsQ291bnQiLCJjcmVhdGVFbGVtZW50IiwiZGlzYWJsZWQiLCJjb21wbGV0ZSIsInBvc2l0aXZlIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJkZXNjcmlwdGlvbiIsInV0aWxzIiwiZnJvbVdlaSIsInJlY2lwaWVudCIsImNvbG9yIiwiYmFzaWMiLCJvbkNsaWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBSkEsSUFBSUEsZUFBZSwrQ0FBbkI7OztBQU1BLElBQUlDLGFBQWEsVUFBVUMsVUFBVixFQUFzQjtBQUNyQyww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SUFERixFQUVFO0FBQ0VVLGtCQUFVO0FBQ1JDLG9CQUFVM0QsWUFERjtBQUVSNEQsc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRSxjQUFLRSxLQUFMLENBQVdDLE9BQVgsQ0FBbUJiLFFBQVFMLEtBQTNCLEVBQWtDLE9BQWxDLENBUkYsQ0EzQkssRUFxQ0wsZ0JBQU1TLGFBQU4sQ0FDRU4sSUFERixFQUVFO0FBQ0VVLGtCQUFVO0FBQ1JDLG9CQUFVM0QsWUFERjtBQUVSNEQsc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRVYsUUFBUWMsU0FSVixDQXJDSyxFQStDTCxnQkFBTVYsYUFBTixDQUNFTixJQURGLEVBRUU7QUFDRVUsa0JBQVU7QUFDUkMsb0JBQVUzRCxZQURGO0FBRVI0RCxzQkFBWTtBQUZKO0FBRFosT0FGRixFQVFFVixRQUFRRyxhQVJWLEVBU0UsR0FURixFQVVFRixjQVZGLENBL0NLLEVBMkRMLGdCQUFNRyxhQUFOLENBQ0VOLElBREYsRUFFRTtBQUNFVSxrQkFBVTtBQUNSQyxvQkFBVTNELFlBREY7QUFFUjRELHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUVWLFFBQVFNLFFBQVIsR0FBbUIsSUFBbkIsR0FBMEIsZ0JBQU1GLGFBQU4sMEJBRXhCLEVBQUVXLE9BQU8sT0FBVCxFQUFrQkMsT0FBTyxJQUF6QixFQUErQkMsU0FBUyxLQUFLakQsU0FBN0MsRUFBd0R3QyxVQUFVO0FBQzlEQyxvQkFBVTNELFlBRG9EO0FBRTlENEQsc0JBQVk7QUFGa0Q7QUFBbEUsT0FGd0IsRUFPeEIsU0FQd0IsQ0FSNUIsQ0EzREssRUE2RUwsZ0JBQU1OLGFBQU4sQ0FDRU4sSUFERixFQUVFO0FBQ0VVLGtCQUFVO0FBQ1JDLG9CQUFVM0QsWUFERjtBQUVSNEQsc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRVYsUUFBUU0sUUFBUixHQUFtQixJQUFuQixHQUEwQixnQkFBTUYsYUFBTiwwQkFFeEIsRUFBRVcsT0FBTyxNQUFULEVBQWlCQyxPQUFPLElBQXhCLEVBQThCQyxTQUFTLEtBQUs1QixVQUE1QyxFQUF3RG1CLFVBQVU7QUFDOURDLG9CQUFVM0QsWUFEb0Q7QUFFOUQ0RCxzQkFBWTtBQUZrRDtBQUFsRSxPQUZ3QixFQU94QixVQVB3QixDQVI1QixDQTdFSyxDQUFQO0FBZ0dEO0FBNUd1QixHQUFELENBQXpCOztBQStHQSxTQUFPM0QsVUFBUDtBQUNELENBNUtnQixrQkFBakI7O2tCQThLZUEsVSIsImZpbGUiOiJ1bmtub3duIn0=